# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import my_service_pb2 as my__service__pb2


class JustAnotherServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DoSomeMath = channel.unary_unary(
                '/tutorial.JustAnotherService/DoSomeMath',
                request_serializer=my__service__pb2.MathRequest.SerializeToString,
                response_deserializer=my__service__pb2.MathResponse.FromString,
                )
        self.ListAnimeByTitle = channel.unary_stream(
                '/tutorial.JustAnotherService/ListAnimeByTitle',
                request_serializer=my__service__pb2.AnimeTitle.SerializeToString,
                response_deserializer=my__service__pb2.Anime.FromString,
                )
        self.FloodWithMessages = channel.stream_unary(
                '/tutorial.JustAnotherService/FloodWithMessages',
                request_serializer=my__service__pb2.Message.SerializeToString,
                response_deserializer=my__service__pb2.Message.FromString,
                )
        self.SquareTheNumbers = channel.stream_stream(
                '/tutorial.JustAnotherService/SquareTheNumbers',
                request_serializer=my__service__pb2.Number.SerializeToString,
                response_deserializer=my__service__pb2.Number.FromString,
                )


class JustAnotherServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DoSomeMath(self, request, context):
        """simple RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAnimeByTitle(self, request, context):
        """response-streaming RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FloodWithMessages(self, request_iterator, context):
        """request-streaming RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SquareTheNumbers(self, request_iterator, context):
        """bidirectionally-streaming RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JustAnotherServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DoSomeMath': grpc.unary_unary_rpc_method_handler(
                    servicer.DoSomeMath,
                    request_deserializer=my__service__pb2.MathRequest.FromString,
                    response_serializer=my__service__pb2.MathResponse.SerializeToString,
            ),
            'ListAnimeByTitle': grpc.unary_stream_rpc_method_handler(
                    servicer.ListAnimeByTitle,
                    request_deserializer=my__service__pb2.AnimeTitle.FromString,
                    response_serializer=my__service__pb2.Anime.SerializeToString,
            ),
            'FloodWithMessages': grpc.stream_unary_rpc_method_handler(
                    servicer.FloodWithMessages,
                    request_deserializer=my__service__pb2.Message.FromString,
                    response_serializer=my__service__pb2.Message.SerializeToString,
            ),
            'SquareTheNumbers': grpc.stream_stream_rpc_method_handler(
                    servicer.SquareTheNumbers,
                    request_deserializer=my__service__pb2.Number.FromString,
                    response_serializer=my__service__pb2.Number.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tutorial.JustAnotherService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JustAnotherService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DoSomeMath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tutorial.JustAnotherService/DoSomeMath',
            my__service__pb2.MathRequest.SerializeToString,
            my__service__pb2.MathResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAnimeByTitle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/tutorial.JustAnotherService/ListAnimeByTitle',
            my__service__pb2.AnimeTitle.SerializeToString,
            my__service__pb2.Anime.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FloodWithMessages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/tutorial.JustAnotherService/FloodWithMessages',
            my__service__pb2.Message.SerializeToString,
            my__service__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SquareTheNumbers(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/tutorial.JustAnotherService/SquareTheNumbers',
            my__service__pb2.Number.SerializeToString,
            my__service__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
